{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Lambda function with cfn-response.",
    "Parameters": {
        "instances": {
            "Default": "i-12345678",
            "Description": "Instance ID's seperated by commers",
            "Type": "String"
        },
        "Region": {
            "Description": "region only 1 region supported",
            "Type": "String"
        },
        "StopScheduled": {
            "Default": "cron(0 18 ? * MON-FRI *)",
            "Description": "enter an Schedule expression example cron(0 18 ? * MON-FRI *) see https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html",
            "Type": "String"
        },
        "StartScheduled": {
            "Default": "cron(0 7 ? * MON-FRI *)",
            "Description": "enter an Schedule expression example cron(0 7 ? * MON-FRI * ) see https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html",
            "Type": "String"
        }
    },
    "Resources": {
        "StopEC2Instances": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Runtime": "python3.8",
                "Role": {
                    "Fn::GetAtt": [
                        "Role",
                        "Arn"
                    ]
                },
                "Handler": "index.lambda_handler",
                "Timeout": 60,
                "Environment": {
                    "Variables": {
                        "instances": {
                            "Ref": "instances"
                        },
                        "Region": {
                            "Ref": "Region"
                        }
                    }
                },
                "Code": {
                    "ZipFile": "import json\nimport re\nimport os\nimport boto3\n\ndef lambda_handler(event, context):\n  # TODO implement\n  instances_str = os.environ['instances']\n  region = os.environ['Region']\n  ec2 = boto3.client('ec2', region_name=region)\n  instances= re.findall(r\"i-[0-9a-z]{17}|i-[0-9a-z]{8}\", instances_str)\n  print('stopped your instances: ' + str(instances) + \"in Region \"+ region)\n  ec2.stop_instances(InstanceIds=instances)\n  \n  return {\n    'statusCode': 200,\n    'body': json.dumps('stopped your instances: ' + str(instances))\n  }\n"
                },
                "Description": "Function that stops instances"
            }
        },
        "permissionForEventsToInvokeStopEC2Instances": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "StopEC2Instances",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "StopScheduledRule",
                        "Arn"
                    ]
                }
            }
        },
        "StartEC2Instances": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Runtime": "python3.8",
                "Role": {
                    "Fn::GetAtt": [
                        "Role",
                        "Arn"
                    ]
                },
                "Handler": "index.lambda_handler",
                "Timeout": 60,
                "Environment": {
                    "Variables": {
                        "instances": {
                            "Ref": "instances"
                        },
                        "Region": {
                            "Ref": "Region"
                        }
                    }
                },
                "Code": {
                    "ZipFile": "import json\nimport re\nimport os\nimport boto3\n\ndef lambda_handler(event, context):\n  # TODO implement\n  instances_str = os.environ['instances']\n  region = os.environ['Region']\n  ec2 = boto3.client('ec2', region_name=region)\n  instances= re.findall(r\"i-[0-9a-z]{17}|i-[0-9a-z]{8}\", instances_str)\n  print('started your instances: ' + str(instances)+ \"in Region \"+ region)\n  ec2.start_instances(InstanceIds=instances)\n  \n  return {\n    'statusCode': 200,\n    'body': json.dumps('started your instances: ' + str(instances))\n  }\n"
                },
                "Description": "Function that started instances"
            }
        },
        "permissionForEventsToInvokeStartEC2Instances": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "StartEC2Instances",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "StartScheduledRule",
                        "Arn"
                    ]
                }
            }
        },
        "Role": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                ],
                "Policies": [
                    {
                        "PolicyName": "Ec2permissions",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:StartInstances",
                                        "ec2:StopInstances"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "StopScheduledRule": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "Description": "ScheduledRule",
                "ScheduleExpression": {
                    "Ref": "StopScheduled"
                },
                "State": "ENABLED",
                "Targets": [
                    {
                        "Arn": {
                            "Fn::GetAtt": [
                                "StopEC2Instances",
                                "Arn"
                            ]
                        },
                        "Id": "TargetFunctionV1"
                    }
                ]
            }
        },
        "StartScheduledRule": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "Description": "ScheduledRule",
                "ScheduleExpression": {
                    "Ref": "StartScheduled"
                },
                "State": "ENABLED",
                "Targets": [
                    {
                        "Arn": {
                            "Fn::GetAtt": [
                                "StartEC2Instances",
                                "Arn"
                            ]
                        },
                        "Id": "TargetFunctionV1"
                    }
                ]
            }
        }
    }
}